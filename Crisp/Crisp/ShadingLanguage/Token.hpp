#pragma once

#include <string>
#include <any>

namespace crisp::sl
{
    enum class TokenType
    {
        // Single-character tokens
        LeftParen,
        RightParen,
        LeftBracket,
        RightBracket,
        LeftBrace,
        RightBrace,
        Comma,
        Dot,
        Minus,
        Plus,
        Slash,
        Star,
        Semicolon,
        Hash,
        Tilde,
        Percent,
        BitwiseAnd,
        BitwiseOr,
        BitwiseXor,
        QuestionMark,
        FullColon,
        Equal,
        PlusEqual,
        MinusEqual,
        StarEqual,
        SlashEqual,

        // Operators
        MinusMinus,
        PlusPlus,
        ExclamationMark,
        LessThan,
        LessThanEqual,
        GreaterThan,
        GreaterThanEqual,
        EqualEqual,
        NotEqual,
        LogicalAnd,
        LogicalOr,
        LogicalXor,
        BitShiftLeft,
        BitShiftRight,

        // Literals
        Identifier,
        String,
        IntConstant,
        UintConstant,
        FloatConstant,
        DoubleConstant,
        BoolConstant,

        // Keywords

        // Execution Control
        Break,
        Continue,
        Do,
        While,
        Switch,
        Case,
        Default,
        If,
        For,
        Else,
        Subroutine,
        Discard,
        Return,

        // Qualifiers
        Const,
        In,
        Out,
        InOut,

        // Types
        Float,
        Double,
        Int,
        Uint,
        Void,
        Bool,
        Struct,
        Mat2,
        Mat3,
        Mat4,
        Dmat2,
        Dmat3,
        Dmat4,
        Mat2x2,
        Mat2x3,
        Mat2x4,
        Dmat2x2,
        Dmat2x3,
        Dmat2x4,
        Mat3x2,
        Mat3x3,
        Mat3x4,
        Dmat3x2,
        Dmat3x3,
        Dmat3x4,
        Mat4x2,
        Mat4x3,
        Mat4x4,
        Dmat4x2,
        Dmat4x3,
        Dmat4x4,
        Vec2,
        Vec3,
        Vec4,
        Ivec2,
        Ivec3,
        Ivec4,
        Bvec2,
        Bvec3,
        Bvec4,
        Uvec2,
        Uvec3,
        Uvec4,
        Dvec2,
        Dvec3,
        Dvec4,
        AtomicUint,

        // Declarations
        Uniform,
        Buffer,
        Shared,
        Coherent,
        Volatile,
        Restrict,
        ReadOnly,
        WriteOnly,
        Layout,
        Centroid,
        Flat,
        Smooth,
        NoPerspective,
        Patch,
        Sample,
        Invariant,
        Precise,
        LowP,
        MediumP,
        HighP,
        Precision,

        // Sampler types
        Sampler1D,
        Sampler2D,
        Sampler3D,
        SamplerCube,
        Sampler1DShadow,
        Sampler2DShadow,
        SamplerCubeShadow,
        Sampler1DArray,
        Sampler2DArray,
        Sampler1DArrayShadow,
        Sampler2DArrayShadow,
        Sampler2DRect,
        Sampler2DRectShadow,
        SamplerBuffer,
        Isampler1D,
        Isampler2D,
        Isampler3D,
        IsamplerCube,
        Isampler1DArray,
        Isampler2DArray,
        Isampler2DRect,
        IsamplerBuffer,
        Usampler1D,
        Usampler2D,
        Usampler3D,
        UsamplerCube,
        Usampler1DArray,
        Usampler2DArray,
        Usampler2DRect,
        UsamplerBuffer,
        Sampler2DMS,
        Isampler2DMS,
        Usampler2DMS,
        Sampler2DMSArray,
        Isampler2DMSArray,
        Usampler2DMSArray,
        SamplerCubeArray,
        SamplerCubeArrayShadow,
        IsamplerCubeArray,
        UsamplerCubeArray,
        Image1D,
        Iimage1D,
        Uimage1D,
        Image2D,
        Iimage2D,
        Uimage2D,
        Image3D,
        Iimage3D,
        Uimage3D,
        Image2DRect,
        Iimage2DRect,
        Uimage2DRect,
        ImageCube,
        IimageCube,
        UimageCube,
        ImageBuffer,
        IimageBuffer,
        UimageBuffer,
        Image1DArray,
        Iimage1DArray,
        Uimage1DArray,
        Image2DArray,
        Iimage2DArray,
        Uimage2DArray,
        ImageCubeArray,
        IimageCubeArray,
        UimageCubeArray,
        Image2DMS,
        Iimage2DMS,
        Uimage2DMS,
        Image2DMSArray,
        Iimage2DMSArray,
        Uimage2DMSArray,

        // Vulkan opaque types
        Texture1D,
        Texture1DArray,
        ITexture1D,
        ITexture1DArray,
        UTexture1D,
        UTexture1DArray,
        Texture2D,
        Texture2DArray,
        ITexture2D,
        ITexture2DArray,
        UTexture2D,
        UTexture2DArray,
        Texture2DRect,
        ITexture2DRect,
        UTexture2DRect,
         Texture2DMS,
        ITexture2DMS,
        UTexture2DMS,
         Texture2DMSArray,
        ITexture2DMSArray,
        UTexture2DMSArray,
         Texture3D,
        ITexture3D,
        UTexture3D,
         TextureCube,
        ITextureCube,
        UTextureCube,
         TextureCubeArray,
        ITextureCubeArray,
        UTextureCubeArray,
         TextureBuffer,
        ITextureBuffer,
        UTextureBuffer,

        Sampler,
        SamplerShadow,

        SubpassInput,
        ISubpassInput,
        USubpassInput,
        SubpassInputMS,
        ISubpassInputMS,
        USubpassInputMS,

        // Reserved keywords
        Common,
        Partition,
        Active,
        Asm,
        Class,
        Union,
        Enum,
        Typedef,
        Template,
        This,
        Resource,
        Goto,
        Inline,
        Noinline,
        Public,
        Static,
        Extern,
        External,
        Interface,
        Long,
        Short,
        Half,
        Fixed,
        Unsigned,
        Superp,
        Input,
        Output,
        Hvec2,
        Hvec3,
        Hvec4,
        Fvec2,
        Fvec3,
        Fvec4,
        Filter,
        Sizeof,
        Cast,
        Namespace,
        Using,
        Sampler3DRect,

        // CSL Extension keywords
        // ...

        Unknown,
        EndOfFile
    };

    struct Token
    {
        Token() {}

        template<typename T>
        Token(TokenType type, std::string lexeme, T literal, int line)
            : lexeme(std::move(lexeme))
            , type(type)
            , literal(std::move(literal))
            , line(line)
        {}

        std::string lexeme;
        TokenType   type = TokenType::Unknown;
        std::any    literal;
        int         line = -1;
    };
}